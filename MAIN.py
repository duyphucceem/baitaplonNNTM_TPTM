import cv2
import numpy as np
import requests
from tkinter import *
from PIL import Image, ImageTk
import threading
import socket

ESP32_STREAM_URL = "http://172.20.10.2/stream"

sample_image = None  # ·∫¢nh m·∫´u to√†n c·ª•c


# H√†m ƒë·ªçc 1 frame t·ª´ lu·ªìng MJPEG
def get_frame_from_stream(url):
    stream = requests.get(url, stream=True)
    bytes_data = b""
    for chunk in stream.iter_content(chunk_size=1024):
        bytes_data += chunk
        a = bytes_data.find(b'\xff\xd8')  # JPEG start
        b = bytes_data.find(b'\xff\xd9')  # JPEG end
        if a != -1 and b != -1:
            jpg = bytes_data[a:b + 2]
            bytes_data = bytes_data[b + 2:]
            img_array = np.frombuffer(jpg, dtype=np.uint8)
            img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
            return img
    return None


# L∆∞u ·∫£nh m·∫´u
def save_sample():
    global sample_image
    img = get_frame_from_stream(ESP32_STREAM_URL)
    if img is not None:
        sample_image = img.copy()
        cv2.imwrite("sample.jpg", sample_image)
        result_label.config(text="‚úÖ ƒê√£ l∆∞u ·∫£nh m·∫´u")
    else:
        result_label.config(text="‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c ·∫£nh")


# So s√°nh ·∫£nh hi·ªán t·∫°i v·ªõi ·∫£nh m·∫´u (d√πng trong GUI)
def compare_image():
    global sample_image
    img = get_frame_from_stream(ESP32_STREAM_URL)
    if img is None or sample_image is None:
        result_label.config(text="‚ö†Ô∏è Thi·∫øu ·∫£nh m·∫´u ho·∫∑c ·∫£nh m·ªõi")
        return

    # Resize cho gi·ªëng k√≠ch th∆∞·ªõc
    img_resized = cv2.resize(img, (sample_image.shape[1], sample_image.shape[0]))

    # So s√°nh ƒë∆°n gi·∫£n d√πng diff
    diff = cv2.absdiff(sample_image, img_resized)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 50, 255, cv2.THRESH_BINARY)
    percent_diff = (np.count_nonzero(thresh) / thresh.size) * 100

    if percent_diff < 20:
        result_label.config(text="‚úÖ H√¨nh ·∫£nh kh·ªõp (%.2f%% kh√°c bi·ªát)" % percent_diff)
    else:
        result_label.config(text="‚ùå H√¨nh ·∫£nh KH√îNG kh·ªõp (%.2f%% kh√°c bi·ªát)" % percent_diff)


# So s√°nh ·∫£nh tr·∫£ v·ªÅ k·∫øt qu·∫£ string (d√πng cho TCP server)
def compare_image_socket():
    global sample_image
    img = get_frame_from_stream(ESP32_STREAM_URL)
    if img is None or sample_image is None:
        return "NO_IMAGE"

    img_resized = cv2.resize(img, (sample_image.shape[1], sample_image.shape[0]))
    diff = cv2.absdiff(sample_image, img_resized)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 50, 255, cv2.THRESH_BINARY)
    percent_diff = (np.count_nonzero(thresh) / thresh.size) * 100

    if percent_diff < 20:
        return f"OK:{percent_diff:.2f}"
    else:
        return f"FAIL:{percent_diff:.2f}"


# Hi·ªÉn th·ªã ·∫£nh live li√™n t·ª•c tr√™n GUI
def update_preview():
    img = get_frame_from_stream(ESP32_STREAM_URL)
    if img is not None:
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        img_pil = Image.fromarray(img_rgb)
        img_tk = ImageTk.PhotoImage(image=img_pil)
        preview_label.imgtk = img_tk
        preview_label.configure(image=img_tk)
    preview_label.after(100, update_preview)


# X·ª≠ l√Ω k·∫øt n·ªëi t·ª´ ESP
def handle_client(client_socket):
    while True:
        try:
            msg = client_socket.recv(1024).decode('utf-8').strip()
            if not msg:
                break
            print(f"Nh·∫≠n l·ªánh t·ª´ ESP: {msg}")
            if msg == "REQ_PROCESS":
                result = compare_image_socket()
                client_socket.send((result + "\n").encode('utf-8'))
            else:
                client_socket.send(b"UNKNOWN_COMMAND\n")
        except Exception as e:
            print(f"L·ªói k·∫øt n·ªëi client: {e}")
            break
    client_socket.close()


# Kh·ªüi ch·∫°y TCP server ƒë·ªÉ ESP k·∫øt n·ªëi
def start_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("0.0.0.0", 5000))  # M·ªü port 5000 ch·ªù k·∫øt n·ªëi
    server.listen(5)
    print("Server ƒëang ch·ªù ESP k·∫øt n·ªëi ·ªü port 5000...")
    while True:
        client_socket, addr = server.accept()
        print(f"ESP k·∫øt n·ªëi t·ª´ {addr}")
        client_thread = threading.Thread(target=handle_client, args=(client_socket,))
        client_thread.start()


# GUI tkinter
root = Tk()
root.title("ESP32-CAM So s√°nh ·∫£nh")

preview_label = Label(root)
preview_label.pack()

btn_frame = Frame(root)
btn_frame.pack()

Button(btn_frame, text="üì∑ L∆∞u ·∫£nh m·∫´u", command=save_sample, width=20).pack(side=LEFT, padx=10, pady=10)
Button(btn_frame, text="üîç So s√°nh ·∫£nh", command=compare_image, width=20).pack(side=LEFT, padx=10, pady=10)

result_label = Label(root, text="", font=("Arial", 12), fg="blue")
result_label.pack(pady=5)

# B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t live stream
update_preview()

# Ch·∫°y server trong thread ri√™ng ƒë·ªÉ kh√¥ng block GUI
server_thread = threading.Thread(target=start_server, daemon=True)
server_thread.start()

root.mainloop()
